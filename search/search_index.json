{
    "docs": [
        {
            "location": "/", 
            "text": "Armory\n\n\nArmory is a testing framework for iOS written in Swift\n\n\nInstallation\n\n\nGit submodule\n\n\nArmory can be added as a dependency of a project as a git submodule:\n\n\ngit submodule add git@github.com:stablekernel/Armory.git\n\n\nThis leaves the option of using the source files directly or embedding as a framework.\n\n\n\n\nSource files directly\n\n\nCreate a group for Armory\n\n\nDrag the source files from Armory/Armory into the group\n\n\nEmbedded framework\n\n\nDrag Armory.xcodeproj into your project\n\n\nAdd Armory.framework to your project as an embedded binary\n\n\n\n\nUsing an embedded framework gets a little tricky when the parent project uses any configurations other than \nDebug\n and \nRelease\n. If your project needs more configuration, install the source files directly.", 
            "title": "Home"
        }, 
        {
            "location": "/#armory", 
            "text": "Armory is a testing framework for iOS written in Swift", 
            "title": "Armory"
        }, 
        {
            "location": "/#installation", 
            "text": "", 
            "title": "Installation"
        }, 
        {
            "location": "/#git-submodule", 
            "text": "Armory can be added as a dependency of a project as a git submodule:  git submodule add git@github.com:stablekernel/Armory.git  This leaves the option of using the source files directly or embedding as a framework.   Source files directly  Create a group for Armory  Drag the source files from Armory/Armory into the group  Embedded framework  Drag Armory.xcodeproj into your project  Add Armory.framework to your project as an embedded binary   Using an embedded framework gets a little tricky when the parent project uses any configurations other than  Debug  and  Release . If your project needs more configuration, install the source files directly.", 
            "title": "Git submodule"
        }, 
        {
            "location": "/quickstart/", 
            "text": "Quickstart\n\n\nArmory is built to run along side existing XCTests in your project. \n\n\nTo get started, first make sure your test class conforms to the \nVCTest\n protocol:\n\n\nclass MyViewControllerTests: XCTestCase, VCTest\n\n\n\n\nThen use provided Armory methods in any place where you would like to simulate user interaction. For example, a \nUITextField\n that you want to enter text into would look like: \n\n\ntype(viewController.myTextField, text: \nSome text here\n)\n\n\n\n\nThe process is similar for other elements, so if you wanted to tap a button you would write:\n\n\ntap(myButton)\n\n\n\n\nIn addition to interacting with \nUIKit\n elements, Armory also provides conveniences for testing \nUIViewController\n presentations and dismissals. Below shows an example of how to test presenting and dismissing a \nUIAlertController\n instance:\n\n\ntap(viewController.showAlert)\n\nlet alertController: UIAlertController = waitForPresentedViewController()\ntapButton(withTitle: \nClose\n, fromAlertController: alertController)\n\nwaitForDismissedViewController()\nXCTAssertNil(viewController.presentedViewController)", 
            "title": "Quickstart"
        }, 
        {
            "location": "/quickstart/#quickstart", 
            "text": "Armory is built to run along side existing XCTests in your project.   To get started, first make sure your test class conforms to the  VCTest  protocol:  class MyViewControllerTests: XCTestCase, VCTest  Then use provided Armory methods in any place where you would like to simulate user interaction. For example, a  UITextField  that you want to enter text into would look like:   type(viewController.myTextField, text:  Some text here )  The process is similar for other elements, so if you wanted to tap a button you would write:  tap(myButton)  In addition to interacting with  UIKit  elements, Armory also provides conveniences for testing  UIViewController  presentations and dismissals. Below shows an example of how to test presenting and dismissing a  UIAlertController  instance:  tap(viewController.showAlert)\n\nlet alertController: UIAlertController = waitForPresentedViewController()\ntapButton(withTitle:  Close , fromAlertController: alertController)\n\nwaitForDismissedViewController()\nXCTAssertNil(viewController.presentedViewController)", 
            "title": "Quickstart"
        }, 
        {
            "location": "/components/", 
            "text": "UIAlertController\n\n\nCalls handler associated with specified \nUIAlertAction\n in a given \nUIAlertController\n instance and dismisses \nUIAlertController\n\n\nfunc tapButton(withTitle title: String, fromAlertController alertController: UIAlertController)\n\n\n\n\nParameters\n\n\ntitle\n: Title for \nUIAlertAction\n\n\nalertController\n: The \nUIAlertController\n instance that contains the \nUIAlertAction\n\n\nExample\n\n\ntap(viewController.showAlert)\n\nlet alertController: UIAlertController = waitForPresentedViewController()\ntapButton(withTitle: \nClose\n, fromAlertController: alertController)\n\nwaitForDismissedViewController()\nXCTAssertNil(viewController.presentedViewController)\n\n\n\n\n\n\nUICollectionView\n\n\nReturns typed cell from given \nindexPath\n in a \nUICollectionView\n instance\n\n\nfunc selectCell\nA: UICollectionViewCell\n(atIndex indexPath: IndexPath, fromCollectionView collectionView: UICollectionView) -\n A\n\n\n\n\nParameters\n\n\nindexPath\n: \nIndexPath\n where the \nUICollectionViewCell\n is located\n\n\ncollectionView\n: The \nUICollectionView\n that contains the cell\n\n\nreturns\n: The typed cell at given \nindexPath\n\n\nExample\n\n\nfor row in 0..\nviewController.myCollectionView.numberOfItems(inSection: 0) {\n    let index = IndexPath(row: row, section: 0)\n    scroll(to: index, in: viewController.myCollectionView)\n\n    let cell: MyCollectionViewCell = selectCell(atIndex: index, fromCollectionView: viewController.myCollectionView)\n    tap(cell.checkmarkButton)\n}\n\n\n\n\n\n\nUITableView\n\n\nReturns typed cell from given \nindexPath\n in a \nUITableView\n instance\n\n\nfunc selectCell\nA: UITableViewCell\n(atIndex indexPath: IndexPath, fromTableView tableView: UITableView) -\n A\n\n\n\n\nParameters\n\n\nindexPath\n: \nIndexPath\n where the \nUITableViewCell\n is located\n\n\ntableView\n: The \nUITableView\n that contains the cell\n\n\nreturns\n: The typed cell at given \nindexPath\n\n\nExample\n\n\nfor row in 0..\nviewController.myTableView.numberOfRows(inSection: 0) {\n    let index = IndexPath(row: row, section: 0)\n    scroll(to: index, in: viewController.myTableView)\n\n    let cell: MyTableViewCell = selectCell(atIndex: index, fromTableView: viewController.myTableView)\n    tap(cell.checkmarkButton)\n}\n\n\n\n\n\n\nUIDatePicker\n\n\nSets the date for a given \nUIDatePicker\n instance\n\n\nfunc selectDate(_ date: Date, fromDatePicker datePicker: UIDatePicker, animated: Bool)\n\n\n\n\nParameters\n\n\ndate\n: \nDate\n to be set in \nUIDatePicker\n\n\ndatePicker\n: \nUIDatePicker\n instance to set date on\n\n\nanimated\n: Default \ntrue\n. Set to \nfalse\n to disable animation of date selection.\n\n\nExample\n\n\ntap(viewController.dateTextInput)\nlet datePickerVC: DatePickerViewController = waitForPresentedViewController()\n\nselectDate(date, fromDatePicker: datePickerVC.datePicker, animated: animated)\n\nXCTAssertEqual(date, datePickerVC.datePicker.date)\n\n\n\n\n\n\nUIPickerView\n\n\nSelects item at row for a given \nUIDatePicker\n instance\n\n\nfunc selectItem(atRow row: Int, fromPicker picker: UIPickerView, animated: Bool)\n\n\n\n\nParameters\n\n\nrow\n: Item's row within \npicker\n\n\npicker\n: The \nUIPickerView\n where item is located\n\nanimated\n: Default \ntrue\n. Set to \nfalse\n to disable animation of item selection.\n\n\nExample\n\n\nselectItem(atRow: 1, fromPicker: viewController.pickerView, animated: true)\n\nXCTAssertEqual(viewController.pickerView.selectedRow(inComponent: 0), 1)\n\n\n\n\n\n\nUISegmentedControl\n\n\nSelects the segment at index of given \nUISegmentedControl\n\n\nfunc selectSegment(_ segmentedControl: UISegmentedControl, atIndex index: Int)\n\n\n\n\nParameters\n\n\nsegmentedControl\n: \nUISegmentedControl\n instance to update\n\n\nindex\n: Index of segment to be selected\n\n\nExample\n\n\nlet index = 1\n\nselectSegment(viewController.segmentedControl, atIndex: index)\n\nXCTAssertEqual(viewController.segmentedControl.selectedSegmentIndex, index)\n\n\n\n\n\n\nSelects the segment with title within given \nUISegmentedControl\n\n\nfunc selectSegment(_ segmentedControl: UISegmentedControl, withTitle title: String)\n\n\n\n\nParameters\n\n\nsegmentedControl\n: \nUISegmentedControl\n instance to update\n\n\ntitle\n: Title of segment to tap\n\n\nExample\n\n\nlet title = \nSecond\n\n\nselectSegment(viewController.segmentedControl, withTitle: title)\n\nXCTAssertEqual(viewController.segmentedControl.titleForSegment(at: viewController.segmentedControl.selectedSegmentIndex), title)\n\n\n\n\n\n\nSelects the segment with specified image of given \nUISegmentedControl\n\n\nfunc selectSegment(_ segmentedControl: UISegmentedControl, withImage image: UIImage)\n\n\n\n\nParameters\n\n\nsegmentedControl\n: \nUISegmentedControl\n instance to update\n\n\nimage\n: Image of segment to tap\n\n\nExample\n\n\nlet image = UIImage.lock()\n\nselectSegment(viewController.segmentedControl, withImage: image)\n\nXCTAssertEqual(viewController.segmentedControl.imageForSegment(at: 1), image)\n\n\n\n\n\n\nUISwitch\n\n\n\n\nUISlider\n\n\n\n\nUIStepper\n\n\n\n\nUITabBar / UITabBarController", 
            "title": "Components"
        }, 
        {
            "location": "/components/#uialertcontroller", 
            "text": "Calls handler associated with specified  UIAlertAction  in a given  UIAlertController  instance and dismisses  UIAlertController  func tapButton(withTitle title: String, fromAlertController alertController: UIAlertController)  Parameters  title : Title for  UIAlertAction  alertController : The  UIAlertController  instance that contains the  UIAlertAction  Example  tap(viewController.showAlert)\n\nlet alertController: UIAlertController = waitForPresentedViewController()\ntapButton(withTitle:  Close , fromAlertController: alertController)\n\nwaitForDismissedViewController()\nXCTAssertNil(viewController.presentedViewController)", 
            "title": "UIAlertController"
        }, 
        {
            "location": "/components/#uicollectionview", 
            "text": "Returns typed cell from given  indexPath  in a  UICollectionView  instance  func selectCell A: UICollectionViewCell (atIndex indexPath: IndexPath, fromCollectionView collectionView: UICollectionView) -  A  Parameters  indexPath :  IndexPath  where the  UICollectionViewCell  is located  collectionView : The  UICollectionView  that contains the cell  returns : The typed cell at given  indexPath  Example  for row in 0.. viewController.myCollectionView.numberOfItems(inSection: 0) {\n    let index = IndexPath(row: row, section: 0)\n    scroll(to: index, in: viewController.myCollectionView)\n\n    let cell: MyCollectionViewCell = selectCell(atIndex: index, fromCollectionView: viewController.myCollectionView)\n    tap(cell.checkmarkButton)\n}", 
            "title": "UICollectionView"
        }, 
        {
            "location": "/components/#uitableview", 
            "text": "Returns typed cell from given  indexPath  in a  UITableView  instance  func selectCell A: UITableViewCell (atIndex indexPath: IndexPath, fromTableView tableView: UITableView) -  A  Parameters  indexPath :  IndexPath  where the  UITableViewCell  is located  tableView : The  UITableView  that contains the cell  returns : The typed cell at given  indexPath  Example  for row in 0.. viewController.myTableView.numberOfRows(inSection: 0) {\n    let index = IndexPath(row: row, section: 0)\n    scroll(to: index, in: viewController.myTableView)\n\n    let cell: MyTableViewCell = selectCell(atIndex: index, fromTableView: viewController.myTableView)\n    tap(cell.checkmarkButton)\n}", 
            "title": "UITableView"
        }, 
        {
            "location": "/components/#uidatepicker", 
            "text": "Sets the date for a given  UIDatePicker  instance  func selectDate(_ date: Date, fromDatePicker datePicker: UIDatePicker, animated: Bool)  Parameters  date :  Date  to be set in  UIDatePicker  datePicker :  UIDatePicker  instance to set date on  animated : Default  true . Set to  false  to disable animation of date selection.  Example  tap(viewController.dateTextInput)\nlet datePickerVC: DatePickerViewController = waitForPresentedViewController()\n\nselectDate(date, fromDatePicker: datePickerVC.datePicker, animated: animated)\n\nXCTAssertEqual(date, datePickerVC.datePicker.date)", 
            "title": "UIDatePicker"
        }, 
        {
            "location": "/components/#uipickerview", 
            "text": "Selects item at row for a given  UIDatePicker  instance  func selectItem(atRow row: Int, fromPicker picker: UIPickerView, animated: Bool)  Parameters  row : Item's row within  picker  picker : The  UIPickerView  where item is located animated : Default  true . Set to  false  to disable animation of item selection.  Example  selectItem(atRow: 1, fromPicker: viewController.pickerView, animated: true)\n\nXCTAssertEqual(viewController.pickerView.selectedRow(inComponent: 0), 1)", 
            "title": "UIPickerView"
        }, 
        {
            "location": "/components/#uisegmentedcontrol", 
            "text": "Selects the segment at index of given  UISegmentedControl  func selectSegment(_ segmentedControl: UISegmentedControl, atIndex index: Int)  Parameters  segmentedControl :  UISegmentedControl  instance to update  index : Index of segment to be selected  Example  let index = 1\n\nselectSegment(viewController.segmentedControl, atIndex: index)\n\nXCTAssertEqual(viewController.segmentedControl.selectedSegmentIndex, index)   Selects the segment with title within given  UISegmentedControl  func selectSegment(_ segmentedControl: UISegmentedControl, withTitle title: String)  Parameters  segmentedControl :  UISegmentedControl  instance to update  title : Title of segment to tap  Example  let title =  Second \n\nselectSegment(viewController.segmentedControl, withTitle: title)\n\nXCTAssertEqual(viewController.segmentedControl.titleForSegment(at: viewController.segmentedControl.selectedSegmentIndex), title)   Selects the segment with specified image of given  UISegmentedControl  func selectSegment(_ segmentedControl: UISegmentedControl, withImage image: UIImage)  Parameters  segmentedControl :  UISegmentedControl  instance to update  image : Image of segment to tap  Example  let image = UIImage.lock()\n\nselectSegment(viewController.segmentedControl, withImage: image)\n\nXCTAssertEqual(viewController.segmentedControl.imageForSegment(at: 1), image)", 
            "title": "UISegmentedControl"
        }, 
        {
            "location": "/components/#uiswitch", 
            "text": "", 
            "title": "UISwitch"
        }, 
        {
            "location": "/components/#uislider", 
            "text": "", 
            "title": "UISlider"
        }, 
        {
            "location": "/components/#uistepper", 
            "text": "", 
            "title": "UIStepper"
        }, 
        {
            "location": "/components/#uitabbar-uitabbarcontroller", 
            "text": "", 
            "title": "UITabBar / UITabBarController"
        }
    ]
}