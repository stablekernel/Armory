{
    "docs": [
        {
            "location": "/", 
            "text": "Armory\n\n\nArmory is a testing framework for iOS written in Swift\n\n\nInstallation\n\n\nGit submodule\n\n\nArmory can be added as a dependency of a project as a git submodule:\n\n\ngit submodule add git@github.com:stablekernel/Armory.git\n\n\nThis leaves the option of using the source files directly or embedding as a framework.\n\n\nSource files directly\n\n\n\n\nCreate a group for Armory\n\n\nDrag the source files from Armory/Armory into the group\n\n\n\n\nEmbedded framework\n\n\n\n\nDrag Armory.xcodeproj into your project\n\n\nAdd Armory.framework to your project as an embedded binary\n\n\n\n\nUsing an embedded framework gets a little tricky when the parent project uses any configurations other than \nDebug\n and \nRelease\n. If your project needs more configuration, install the source files directly.", 
            "title": "Home"
        }, 
        {
            "location": "/#armory", 
            "text": "Armory is a testing framework for iOS written in Swift", 
            "title": "Armory"
        }, 
        {
            "location": "/#installation", 
            "text": "", 
            "title": "Installation"
        }, 
        {
            "location": "/#git-submodule", 
            "text": "Armory can be added as a dependency of a project as a git submodule:  git submodule add git@github.com:stablekernel/Armory.git  This leaves the option of using the source files directly or embedding as a framework.", 
            "title": "Git submodule"
        }, 
        {
            "location": "/#source-files-directly", 
            "text": "Create a group for Armory  Drag the source files from Armory/Armory into the group", 
            "title": "Source files directly"
        }, 
        {
            "location": "/#embedded-framework", 
            "text": "Drag Armory.xcodeproj into your project  Add Armory.framework to your project as an embedded binary   Using an embedded framework gets a little tricky when the parent project uses any configurations other than  Debug  and  Release . If your project needs more configuration, install the source files directly.", 
            "title": "Embedded framework"
        }, 
        {
            "location": "/overview/", 
            "text": "Overview\n\n\nWhat is Armory?\n\n\nArmory is a UI testing framework for iOS built in Swift. \n\n\nArmory allows you to quickly get started with UI testing in your new or existing app by allowing you to test your view controllers in isolation. \n\n\nBenefits of Armory\n\n\nArmory offers many benefits over Apple's built-in UI testing framework, while providing you with the same intuitive functionality you would expect.\n\n\nNeed to simulate a user tapping a button? Just call \ntap(myButton)\n \n\n\nNeed to simulate a user typing into a text field? Just call \ntype(myTextField, \"some text\")\n\n\nWe've created Armory from the ground up with a developer-first mentality to make it as easy as possible to include UI testing in your app.\n\n\nIn addition to being easy to use, Armory is also fast. By spinning up a new window for each test, Armory makes it possible to test each of your view controllers in isolation without having to restart your app. No more starting with \nXCUIApplication\n and having to navigate to the screen you want before each test.\n\n\nGet started with Armory\n\n\nCheckout our \nquickstart\n page to see some more examples, or see our \nhomepage\n to see how to install Armory in your project.", 
            "title": "Overview"
        }, 
        {
            "location": "/overview/#overview", 
            "text": "", 
            "title": "Overview"
        }, 
        {
            "location": "/overview/#what-is-armory", 
            "text": "Armory is a UI testing framework for iOS built in Swift.   Armory allows you to quickly get started with UI testing in your new or existing app by allowing you to test your view controllers in isolation.", 
            "title": "What is Armory?"
        }, 
        {
            "location": "/overview/#benefits-of-armory", 
            "text": "Armory offers many benefits over Apple's built-in UI testing framework, while providing you with the same intuitive functionality you would expect.  Need to simulate a user tapping a button? Just call  tap(myButton)    Need to simulate a user typing into a text field? Just call  type(myTextField, \"some text\")  We've created Armory from the ground up with a developer-first mentality to make it as easy as possible to include UI testing in your app.  In addition to being easy to use, Armory is also fast. By spinning up a new window for each test, Armory makes it possible to test each of your view controllers in isolation without having to restart your app. No more starting with  XCUIApplication  and having to navigate to the screen you want before each test.", 
            "title": "Benefits of Armory"
        }, 
        {
            "location": "/overview/#get-started-with-armory", 
            "text": "Checkout our  quickstart  page to see some more examples, or see our  homepage  to see how to install Armory in your project.", 
            "title": "Get started with Armory"
        }, 
        {
            "location": "/quickstart/", 
            "text": "Quickstart\n\n\nArmory is built to run along side existing XCTests in your project.\n\n\nTo get started, first make sure your test class conforms to the \nArmoryTestable\n protocol:\n\n\nclass MyViewControllerTests: XCTestCase, ArmoryTestable\n\n\n\n\noverride func setUp() {\n    viewController = // Instantiate VC programmatically, from xib or from storyboard\n    build()\n}\n\noverride func tearDown() {\n    viewController = nil\n}\n\n\n\n\n\nThen use provided Armory methods in any place where you would like to simulate user interaction. For example, a \nUITextField\n that you want to enter text into would look like:\n\n\ntype(viewController.myTextField, text: \nSome text here\n)\n\n\n\n\nThe process is similar for other elements, so if you wanted to tap a button you would write:\n\n\ntap(myButton)\n\n\n\n\nIn addition to interacting with \nUIKit\n elements, Armory also provides conveniences for testing \nUIViewController\n presentations and dismissals. Below shows an example of how to test presenting and dismissing a \nUIAlertController\n instance:\n\n\ntap(viewController.showAlertButton)\n\nlet alertController: UIAlertController = waitForPresentedViewController()\ntapButton(withTitle: \nClose\n, fromAlertController: alertController)\n\nwaitForDismissedViewController()\nXCTAssertNil(viewController.presentedViewController)", 
            "title": "Quickstart"
        }, 
        {
            "location": "/quickstart/#quickstart", 
            "text": "Armory is built to run along side existing XCTests in your project.  To get started, first make sure your test class conforms to the  ArmoryTestable  protocol:  class MyViewControllerTests: XCTestCase, ArmoryTestable  override func setUp() {\n    viewController = // Instantiate VC programmatically, from xib or from storyboard\n    build()\n}\n\noverride func tearDown() {\n    viewController = nil\n}  Then use provided Armory methods in any place where you would like to simulate user interaction. For example, a  UITextField  that you want to enter text into would look like:  type(viewController.myTextField, text:  Some text here )  The process is similar for other elements, so if you wanted to tap a button you would write:  tap(myButton)  In addition to interacting with  UIKit  elements, Armory also provides conveniences for testing  UIViewController  presentations and dismissals. Below shows an example of how to test presenting and dismissing a  UIAlertController  instance:  tap(viewController.showAlertButton)\n\nlet alertController: UIAlertController = waitForPresentedViewController()\ntapButton(withTitle:  Close , fromAlertController: alertController)\n\nwaitForDismissedViewController()\nXCTAssertNil(viewController.presentedViewController)", 
            "title": "Quickstart"
        }, 
        {
            "location": "/components/", 
            "text": "UIAlertController\n\n\nCalls handler associated with specified \nUIAlertAction\n in a given \nUIAlertController\n instance and dismisses \nUIAlertController\n\n\nfunc tapButton(withTitle title: String, fromAlertController alertController: UIAlertController)\n\n\n\n\nParameters\n\n\ntitle\n: Title for \nUIAlertAction\n\n\nalertController\n: The \nUIAlertController\n instance that contains the \nUIAlertAction\n\n\nExample\n\n\ntap(viewController.showAlertButton)\n\nlet alertController: UIAlertController = waitForPresentedViewController()\ntapButton(withTitle: \nClose\n, fromAlertController: alertController)\n\nwaitForDismissedViewController()\nXCTAssertNil(viewController.presentedViewController)\n\n\n\n\n\n\nUICollectionView\n\n\nReturns typed cell from given \nindexPath\n in a \nUICollectionView\n instance\n\n\nfunc selectCell\nA: UICollectionViewCell\n(atIndex indexPath: IndexPath, fromCollectionView collectionView: UICollectionView) -\n A\n\n\n\n\nParameters\n\n\nindexPath\n: \nIndexPath\n where the \nUICollectionViewCell\n is located\n\n\ncollectionView\n: The \nUICollectionView\n that contains the cell\n\n\nreturns\n: The typed cell at given \nindexPath\n\n\nExample\n\n\nfor row in 0..\nviewController.myCollectionView.numberOfItems(inSection: 0) {\n    let index = IndexPath(row: row, section: 0)\n    scroll(to: index, in: viewController.myCollectionView)\n\n    let cell: MyCollectionViewCell = selectCell(atIndex: index, fromCollectionView: viewController.myCollectionView)\n    tap(cell.checkmarkButton)\n}\n\n\n\n\n\n\nUIDatePicker\n\n\nSets the date for a given \nUIDatePicker\n instance\n\n\nfunc selectDate(_ date: Date, fromDatePicker datePicker: UIDatePicker, animated: Bool)\n\n\n\n\nParameters\n\n\ndate\n: \nDate\n to be set in \nUIDatePicker\n\n\ndatePicker\n: \nUIDatePicker\n instance to set date on\n\n\nanimated\n: Default \ntrue\n. Set to \nfalse\n to disable animation of date selection.\n\n\nExample\n\n\ntap(viewController.dateTextInput)\nlet datePickerVC: DatePickerViewController = waitForPresentedViewController()\n\nselectDate(date, fromDatePicker: datePickerVC.datePicker, animated: animated)\n\nXCTAssertEqual(date, datePickerVC.datePicker.date)\n\n\n\n\n\n\nUIPickerView\n\n\nSelects item at row for a given \nUIDatePicker\n instance\n\n\nfunc selectItem(atRow row: Int, fromPicker picker: UIPickerView, animated: Bool)\n\n\n\n\nParameters\n\n\nrow\n: Item's row within \npicker\n\n\npicker\n: The \nUIPickerView\n where item is located\n\n\nanimated\n: Default \ntrue\n. Set to \nfalse\n to disable animation of item selection  \n\n\nExample\n\n\nselectItem(atRow: 1, fromPicker: viewController.pickerView, animated: true)\n\nXCTAssertEqual(viewController.pickerView.selectedRow(inComponent: 0), 1)\n\n\n\n\n\n\nUISegmentedControl\n\n\nSelects the segment at index of given \nUISegmentedControl\n\n\nfunc selectSegment(_ segmentedControl: UISegmentedControl, atIndex index: Int)\n\n\n\n\nParameters\n\n\nsegmentedControl\n: \nUISegmentedControl\n instance to update\n\n\nindex\n: Index of segment to be selected\n\n\nExample\n\n\nlet index = 1\n\nselectSegment(viewController.segmentedControl, atIndex: index)\n\nXCTAssertEqual(viewController.segmentedControl.selectedSegmentIndex, index)\n\n\n\n\n\n\nSelects the segment with title within given \nUISegmentedControl\n\n\nfunc selectSegment(_ segmentedControl: UISegmentedControl, withTitle title: String)\n\n\n\n\nParameters\n\n\nsegmentedControl\n: \nUISegmentedControl\n instance to update\n\n\ntitle\n: Title of segment to tap\n\n\nExample\n\n\nlet title = \nSecond\n\n\nselectSegment(viewController.segmentedControl, withTitle: title)\n\nXCTAssertEqual(viewController.segmentedControl.titleForSegment(at: viewController.segmentedControl.selectedSegmentIndex), title)\n\n\n\n\n\n\nSelects the segment with specified image of given \nUISegmentedControl\n\n\nfunc selectSegment(_ segmentedControl: UISegmentedControl, withImage image: UIImage)\n\n\n\n\nParameters\n\n\nsegmentedControl\n: \nUISegmentedControl\n instance to update\n\n\nimage\n: Image of segment to tap\n\n\nExample\n\n\nlet image = UIImage.lock()\n\nselectSegment(viewController.segmentedControl, withImage: image)\n\nXCTAssertEqual(viewController.segmentedControl.imageForSegment(at: 1), image)\n\n\n\n\n\n\nUISlider\n\n\nUpdates the provided \nUISlider\n instance with the given normalized value\n\n\nfunc slide(_ slider: UISlider, toNormalizedValue value: Float, animated: Bool)\n\n\n\n\nParameters\n\n\nslider\n: The provided \nUISlider\n instance to update\n\n\nvalue\n: The normalized value to slide to\n\n\nanimated\n: Default \ntrue\n. Set to \nfalse\n to disable animation of sliding action  \n\n\nExample\n\n\nviewController.slider.minimumValue = 0\nviewController.slider.maximumValue = 100\n\nslide(viewController.slider, toNormalizedValue: 0.5)\n\nXCTAssertEqual(viewController.slider.value, 50)\n\n\n\n\n\n\nUIStepper\n\n\nIncrements the given \nUIStepper\n by the default \nstepValue\n\n\nfunc increment(_ stepper: UIStepper)\n\n\n\n\nParameters\n\n\nstepper\n: The \nUIStepper\n instance to be incremented\n\n\nExample\n\n\nlet originalValue = viewController.stepper.value\n\nincrement(viewController.stepper)\n\nXCTAssertEqual(viewController.stepper.value, originalValue + viewController.stepper.stepValue )\n\n\n\n\n\n\nDecrements the given \nUIStepper\n by the default \nstepValue\n\n\nfunc decrement(_ stepper: UIStepper)\n\n\n\n\nParameters\n\n\nstepper\n: The \nUIStepper\n instance to be decremented\n\n\nExample\n\n\nlet originalValue = viewController.stepper.value\n\ndecrement(viewController.stepper)\n\nXCTAssertEqual(viewController.stepper.value, originalValue - viewController.stepper.stepValue )\n\n\n\n\n\n\nUISwitch\n\n\nToggles the \nisOn\n property of the given \nUISwitch\n instance\n\n\nfunc toggle(_ aSwitch: UISwitch, animated: Bool)\n\n\n\n\nParameters\n\n\naSwitch\n: \nUISwitch\n instance to toggle\n\n\nanimated\n: Default \ntrue\n. Set to \nfalse\n to disable animation of \nUISwitch\n toggle  \n\n\nExample\n\n\nlet initialState = viewController.backgroundSwitch.isOn\n\ntoggle(viewController.backgroundSwitch)\n\nXCTAssertNotEqual(viewController.backgroundSwitch.isOn, initialState)\n\n\n\n\n\n\nUITabBar / UITabBarController\n\n\n\n\nUITableView\n\n\nReturns typed cell from given \nindexPath\n in a \nUITableView\n instance\n\n\nfunc cell\nA: UITableViewCell\n(at indexPath: IndexPath, fromTableView tableView: UITableView) throws -\n A\n\n\n\n\nParameters\n\n\nindexPath\n: The \nIndexPath\n for cell retrieval\n\n\ntableView\n: The \nUITableView\n that contains the cell  \n\n\nthrows\n: ArmoryError.invalidCellType\n\n\nreturns\n: The typed cell at given \nindexPath\n\n\nExample\n\n\nfor row in 0..\nviewController.myTableView.numberOfRows(inSection: 0) {\n    let index = IndexPath(row: row, section: 0)\n    scroll(to: index, in: viewController.myTableView)\n\n    let cell: MyTableViewCell = try! cell(at: index, fromTableView: viewController.myTableView)\n    tap(cell.checkmarkButton)\n}", 
            "title": "Components"
        }, 
        {
            "location": "/components/#uialertcontroller", 
            "text": "Calls handler associated with specified  UIAlertAction  in a given  UIAlertController  instance and dismisses  UIAlertController  func tapButton(withTitle title: String, fromAlertController alertController: UIAlertController)  Parameters  title : Title for  UIAlertAction  alertController : The  UIAlertController  instance that contains the  UIAlertAction  Example  tap(viewController.showAlertButton)\n\nlet alertController: UIAlertController = waitForPresentedViewController()\ntapButton(withTitle:  Close , fromAlertController: alertController)\n\nwaitForDismissedViewController()\nXCTAssertNil(viewController.presentedViewController)", 
            "title": "UIAlertController"
        }, 
        {
            "location": "/components/#uicollectionview", 
            "text": "Returns typed cell from given  indexPath  in a  UICollectionView  instance  func selectCell A: UICollectionViewCell (atIndex indexPath: IndexPath, fromCollectionView collectionView: UICollectionView) -  A  Parameters  indexPath :  IndexPath  where the  UICollectionViewCell  is located  collectionView : The  UICollectionView  that contains the cell  returns : The typed cell at given  indexPath  Example  for row in 0.. viewController.myCollectionView.numberOfItems(inSection: 0) {\n    let index = IndexPath(row: row, section: 0)\n    scroll(to: index, in: viewController.myCollectionView)\n\n    let cell: MyCollectionViewCell = selectCell(atIndex: index, fromCollectionView: viewController.myCollectionView)\n    tap(cell.checkmarkButton)\n}", 
            "title": "UICollectionView"
        }, 
        {
            "location": "/components/#uidatepicker", 
            "text": "Sets the date for a given  UIDatePicker  instance  func selectDate(_ date: Date, fromDatePicker datePicker: UIDatePicker, animated: Bool)  Parameters  date :  Date  to be set in  UIDatePicker  datePicker :  UIDatePicker  instance to set date on  animated : Default  true . Set to  false  to disable animation of date selection.  Example  tap(viewController.dateTextInput)\nlet datePickerVC: DatePickerViewController = waitForPresentedViewController()\n\nselectDate(date, fromDatePicker: datePickerVC.datePicker, animated: animated)\n\nXCTAssertEqual(date, datePickerVC.datePicker.date)", 
            "title": "UIDatePicker"
        }, 
        {
            "location": "/components/#uipickerview", 
            "text": "Selects item at row for a given  UIDatePicker  instance  func selectItem(atRow row: Int, fromPicker picker: UIPickerView, animated: Bool)  Parameters  row : Item's row within  picker  picker : The  UIPickerView  where item is located  animated : Default  true . Set to  false  to disable animation of item selection    Example  selectItem(atRow: 1, fromPicker: viewController.pickerView, animated: true)\n\nXCTAssertEqual(viewController.pickerView.selectedRow(inComponent: 0), 1)", 
            "title": "UIPickerView"
        }, 
        {
            "location": "/components/#uisegmentedcontrol", 
            "text": "Selects the segment at index of given  UISegmentedControl  func selectSegment(_ segmentedControl: UISegmentedControl, atIndex index: Int)  Parameters  segmentedControl :  UISegmentedControl  instance to update  index : Index of segment to be selected  Example  let index = 1\n\nselectSegment(viewController.segmentedControl, atIndex: index)\n\nXCTAssertEqual(viewController.segmentedControl.selectedSegmentIndex, index)   Selects the segment with title within given  UISegmentedControl  func selectSegment(_ segmentedControl: UISegmentedControl, withTitle title: String)  Parameters  segmentedControl :  UISegmentedControl  instance to update  title : Title of segment to tap  Example  let title =  Second \n\nselectSegment(viewController.segmentedControl, withTitle: title)\n\nXCTAssertEqual(viewController.segmentedControl.titleForSegment(at: viewController.segmentedControl.selectedSegmentIndex), title)   Selects the segment with specified image of given  UISegmentedControl  func selectSegment(_ segmentedControl: UISegmentedControl, withImage image: UIImage)  Parameters  segmentedControl :  UISegmentedControl  instance to update  image : Image of segment to tap  Example  let image = UIImage.lock()\n\nselectSegment(viewController.segmentedControl, withImage: image)\n\nXCTAssertEqual(viewController.segmentedControl.imageForSegment(at: 1), image)", 
            "title": "UISegmentedControl"
        }, 
        {
            "location": "/components/#uislider", 
            "text": "Updates the provided  UISlider  instance with the given normalized value  func slide(_ slider: UISlider, toNormalizedValue value: Float, animated: Bool)  Parameters  slider : The provided  UISlider  instance to update  value : The normalized value to slide to  animated : Default  true . Set to  false  to disable animation of sliding action    Example  viewController.slider.minimumValue = 0\nviewController.slider.maximumValue = 100\n\nslide(viewController.slider, toNormalizedValue: 0.5)\n\nXCTAssertEqual(viewController.slider.value, 50)", 
            "title": "UISlider"
        }, 
        {
            "location": "/components/#uistepper", 
            "text": "Increments the given  UIStepper  by the default  stepValue  func increment(_ stepper: UIStepper)  Parameters  stepper : The  UIStepper  instance to be incremented  Example  let originalValue = viewController.stepper.value\n\nincrement(viewController.stepper)\n\nXCTAssertEqual(viewController.stepper.value, originalValue + viewController.stepper.stepValue )   Decrements the given  UIStepper  by the default  stepValue  func decrement(_ stepper: UIStepper)  Parameters  stepper : The  UIStepper  instance to be decremented  Example  let originalValue = viewController.stepper.value\n\ndecrement(viewController.stepper)\n\nXCTAssertEqual(viewController.stepper.value, originalValue - viewController.stepper.stepValue )", 
            "title": "UIStepper"
        }, 
        {
            "location": "/components/#uiswitch", 
            "text": "Toggles the  isOn  property of the given  UISwitch  instance  func toggle(_ aSwitch: UISwitch, animated: Bool)  Parameters  aSwitch :  UISwitch  instance to toggle  animated : Default  true . Set to  false  to disable animation of  UISwitch  toggle    Example  let initialState = viewController.backgroundSwitch.isOn\n\ntoggle(viewController.backgroundSwitch)\n\nXCTAssertNotEqual(viewController.backgroundSwitch.isOn, initialState)", 
            "title": "UISwitch"
        }, 
        {
            "location": "/components/#uitabbar-uitabbarcontroller", 
            "text": "", 
            "title": "UITabBar / UITabBarController"
        }, 
        {
            "location": "/components/#uitableview", 
            "text": "Returns typed cell from given  indexPath  in a  UITableView  instance  func cell A: UITableViewCell (at indexPath: IndexPath, fromTableView tableView: UITableView) throws -  A  Parameters  indexPath : The  IndexPath  for cell retrieval  tableView : The  UITableView  that contains the cell    throws : ArmoryError.invalidCellType  returns : The typed cell at given  indexPath  Example  for row in 0.. viewController.myTableView.numberOfRows(inSection: 0) {\n    let index = IndexPath(row: row, section: 0)\n    scroll(to: index, in: viewController.myTableView)\n\n    let cell: MyTableViewCell = try! cell(at: index, fromTableView: viewController.myTableView)\n    tap(cell.checkmarkButton)\n}", 
            "title": "UITableView"
        }, 
        {
            "location": "/conveniences/", 
            "text": "Conveniences\n\n\nwaitForPresentedViewController\n\n\nConvenience that asserts a view controller is presented while subsequently returning it\n\n\nfunc waitForPresentedViewController\nA: UIViewController\n() -\n A\n\n\n\n\nExample\n\n\ntap(viewController.showAlertButton)\n\nlet alertController: UIAlertController = waitForPresentedViewController()\ntapButton(withTitle: \nClose\n, fromAlertController: alertController)\n\nwaitForDismissedViewController()\nXCTAssertNil(viewController.presentedViewController)\n\n\n\n\n\n\nwaitForDismissedViewController\n\n\nConvenience that asserts the presented view controller is dismissed\n\n\nfunc waitForDismissedViewController()\n\n\n\n\nExample\n\n\ntap(viewController.showAlertButton)\n\nlet alertController: UIAlertController = waitForPresentedViewController()\ntapButton(withTitle: \nClose\n, fromAlertController: alertController)\n\nwaitForDismissedViewController()\nXCTAssertNil(viewController.presentedViewController)\n\n\n\n\n\n\ntap\n\n\nSends a \ntouchUpInside\n event to the given \nUIControl\n, or performs the action associated with a \nUIBarButtonItem\n\n\nfunc tap(_ control: UIControl)\n\nfunc tap(_ barButtonItem: UIBarButtonItem)\n\n\n\n\n\n\ntype\n\n\nInserts given \ntext\n to the \nUITextField\n one character at a time to simulate a user typing\n\n\nfunc type(_ control: UIControl \n UIKeyInput, text: String)\n\n\n\n\n\n\nafter\n\n\nConvenience that waits for given test to complete before continuing. Fails if default timeout of 4s is exceeded. \n\n\nfunc after(_ test: @autoclosure @escaping () -\n Bool)\n\n\n\n\n\n\npump\n\n\nConvenience that performs one pass through the run loop for the current thread\n\n\nfunc pump()", 
            "title": "Conveniences"
        }, 
        {
            "location": "/conveniences/#conveniences", 
            "text": "", 
            "title": "Conveniences"
        }, 
        {
            "location": "/conveniences/#waitforpresentedviewcontroller", 
            "text": "Convenience that asserts a view controller is presented while subsequently returning it  func waitForPresentedViewController A: UIViewController () -  A  Example  tap(viewController.showAlertButton)\n\nlet alertController: UIAlertController = waitForPresentedViewController()\ntapButton(withTitle:  Close , fromAlertController: alertController)\n\nwaitForDismissedViewController()\nXCTAssertNil(viewController.presentedViewController)", 
            "title": "waitForPresentedViewController"
        }, 
        {
            "location": "/conveniences/#waitfordismissedviewcontroller", 
            "text": "Convenience that asserts the presented view controller is dismissed  func waitForDismissedViewController()  Example  tap(viewController.showAlertButton)\n\nlet alertController: UIAlertController = waitForPresentedViewController()\ntapButton(withTitle:  Close , fromAlertController: alertController)\n\nwaitForDismissedViewController()\nXCTAssertNil(viewController.presentedViewController)", 
            "title": "waitForDismissedViewController"
        }, 
        {
            "location": "/conveniences/#tap", 
            "text": "Sends a  touchUpInside  event to the given  UIControl , or performs the action associated with a  UIBarButtonItem  func tap(_ control: UIControl)\n\nfunc tap(_ barButtonItem: UIBarButtonItem)", 
            "title": "tap"
        }, 
        {
            "location": "/conveniences/#type", 
            "text": "Inserts given  text  to the  UITextField  one character at a time to simulate a user typing  func type(_ control: UIControl   UIKeyInput, text: String)", 
            "title": "type"
        }, 
        {
            "location": "/conveniences/#after", 
            "text": "Convenience that waits for given test to complete before continuing. Fails if default timeout of 4s is exceeded.   func after(_ test: @autoclosure @escaping () -  Bool)", 
            "title": "after"
        }, 
        {
            "location": "/conveniences/#pump", 
            "text": "Convenience that performs one pass through the run loop for the current thread  func pump()", 
            "title": "pump"
        }, 
        {
            "location": "/robots/", 
            "text": "Robots\n\n\nRobot classes are typed to a specific view controller, and provide app/domain-specific API around Armory. Robots are intended to be subclassed 1:1 for each view controller.\n\n\nExample\n\n\nLet's say you have a \nDatePickerViewController\n in one of your view controllers, and want to test selecting the date across multiple tests. While Armory provides a \nselectDate\n method, you likely have other user interactions that are necessary to trigger your date selection workflow as well.  \n\n\nInstead of writing out this setup code across multiple tests, create a \nViewControllerRobot\n with a \nselectDate\n method to trigger this workflow in a single line of code in your test class.  \n\n\nViewControllerRobot.swift\n\n\nclass ViewControllerRobot: Robot\nMyViewController\n {\n\n    func selectDate(_ date: Date, type: DateType, animated: Bool = true) {\n\n        tap(viewController.dateTextInput)\n        let datePickerVC: DatePickerViewController = waitForPresentedViewController()\n\n        selectDate(date, fromDatePicker: datePickerVC.datePicker, animated: animated)\n\n        let button: UIBarButtonItem\n\n        switch type {\n        case .scheduled:\n            button = datePickerVC.scheduledButton\n        case .estimated:\n            button = datePickerVC.estimatedButton\n        }\n\n        tap(button)\n        waitForDismissedViewController()\n    }\n}\n\n\n\n\n\nViewControllerTests.swift\n\n\nclass ViewControllerTests: XCTest, ArmoryTestable {\n    var robot: ViewControllerRobot!\n\n    override func setUp() {\n        super.setUp()\n        robot = ViewControllerRobot(self)\n    }\n\n    func testCanSetScheduledDate() {\n        let date = Date()\n\n        robot.selectDate(date, type: .scheduled)\n\n        XCTAssertEqual(date, datePickerVC.datePicker.date)\n    }\n\n    func testCanSetEstimatedDate() {\n        let date = Date()\n\n        robot.selectDate(date, type: .estimated)\n\n        XCTAssertEqual(date, datePickerVC.datePicker.date)\n    }\n}", 
            "title": "Robots"
        }, 
        {
            "location": "/robots/#robots", 
            "text": "Robot classes are typed to a specific view controller, and provide app/domain-specific API around Armory. Robots are intended to be subclassed 1:1 for each view controller.", 
            "title": "Robots"
        }, 
        {
            "location": "/robots/#example", 
            "text": "Let's say you have a  DatePickerViewController  in one of your view controllers, and want to test selecting the date across multiple tests. While Armory provides a  selectDate  method, you likely have other user interactions that are necessary to trigger your date selection workflow as well.    Instead of writing out this setup code across multiple tests, create a  ViewControllerRobot  with a  selectDate  method to trigger this workflow in a single line of code in your test class.", 
            "title": "Example"
        }, 
        {
            "location": "/robots/#viewcontrollerrobotswift", 
            "text": "class ViewControllerRobot: Robot MyViewController  {\n\n    func selectDate(_ date: Date, type: DateType, animated: Bool = true) {\n\n        tap(viewController.dateTextInput)\n        let datePickerVC: DatePickerViewController = waitForPresentedViewController()\n\n        selectDate(date, fromDatePicker: datePickerVC.datePicker, animated: animated)\n\n        let button: UIBarButtonItem\n\n        switch type {\n        case .scheduled:\n            button = datePickerVC.scheduledButton\n        case .estimated:\n            button = datePickerVC.estimatedButton\n        }\n\n        tap(button)\n        waitForDismissedViewController()\n    }\n}", 
            "title": "ViewControllerRobot.swift"
        }, 
        {
            "location": "/robots/#viewcontrollertestsswift", 
            "text": "class ViewControllerTests: XCTest, ArmoryTestable {\n    var robot: ViewControllerRobot!\n\n    override func setUp() {\n        super.setUp()\n        robot = ViewControllerRobot(self)\n    }\n\n    func testCanSetScheduledDate() {\n        let date = Date()\n\n        robot.selectDate(date, type: .scheduled)\n\n        XCTAssertEqual(date, datePickerVC.datePicker.date)\n    }\n\n    func testCanSetEstimatedDate() {\n        let date = Date()\n\n        robot.selectDate(date, type: .estimated)\n\n        XCTAssertEqual(date, datePickerVC.datePicker.date)\n    }\n}", 
            "title": "ViewControllerTests.swift"
        }, 
        {
            "location": "/documentation/", 
            "text": "Stub for actual documentation", 
            "title": "Documentation"
        }, 
        {
            "location": "/documentation/#stub-for-actual-documentation", 
            "text": "", 
            "title": "Stub for actual documentation"
        }
    ]
}